// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cinemahall/proto/cinema.proto

package cinemahallproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cinema service

type CinemaService interface {
	Create(ctx context.Context, in *CreateCinemaRequest, opts ...client.CallOption) (*CreateCinemaResponse, error)
	Delete(ctx context.Context, in *DeleteCinemaRequest, opts ...client.CallOption) (*DeleteCinemaResponse, error)
	Reservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*ReservationResponse, error)
	Storno(ctx context.Context, in *StornoRequest, opts ...client.CallOption) (*StornoResponse, error)
	CheckSeats(ctx context.Context, in *CheckSeatsRequest, opts ...client.CallOption) (*CheckSeatsResponse, error)
	FreeSeats(ctx context.Context, in *FreeSeatsRequest, opts ...client.CallOption) (*FreeSeatsResponse, error)
	GetSizeOfCinema(ctx context.Context, in *SizeRequest, opts ...client.CallOption) (*SizeResponse, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cinemahallproto"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) Create(ctx context.Context, in *CreateCinemaRequest, opts ...client.CallOption) (*CreateCinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Create", in)
	out := new(CreateCinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Delete(ctx context.Context, in *DeleteCinemaRequest, opts ...client.CallOption) (*DeleteCinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Delete", in)
	out := new(DeleteCinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Reservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*ReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Reservation", in)
	out := new(ReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) Storno(ctx context.Context, in *StornoRequest, opts ...client.CallOption) (*StornoResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.Storno", in)
	out := new(StornoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) CheckSeats(ctx context.Context, in *CheckSeatsRequest, opts ...client.CallOption) (*CheckSeatsResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.CheckSeats", in)
	out := new(CheckSeatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) FreeSeats(ctx context.Context, in *FreeSeatsRequest, opts ...client.CallOption) (*FreeSeatsResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.FreeSeats", in)
	out := new(FreeSeatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) GetSizeOfCinema(ctx context.Context, in *SizeRequest, opts ...client.CallOption) (*SizeResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.GetSizeOfCinema", in)
	out := new(SizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	Create(context.Context, *CreateCinemaRequest, *CreateCinemaResponse) error
	Delete(context.Context, *DeleteCinemaRequest, *DeleteCinemaResponse) error
	Reservation(context.Context, *ReservationRequest, *ReservationResponse) error
	Storno(context.Context, *StornoRequest, *StornoResponse) error
	CheckSeats(context.Context, *CheckSeatsRequest, *CheckSeatsResponse) error
	FreeSeats(context.Context, *FreeSeatsRequest, *FreeSeatsResponse) error
	GetSizeOfCinema(context.Context, *SizeRequest, *SizeResponse) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		Create(ctx context.Context, in *CreateCinemaRequest, out *CreateCinemaResponse) error
		Delete(ctx context.Context, in *DeleteCinemaRequest, out *DeleteCinemaResponse) error
		Reservation(ctx context.Context, in *ReservationRequest, out *ReservationResponse) error
		Storno(ctx context.Context, in *StornoRequest, out *StornoResponse) error
		CheckSeats(ctx context.Context, in *CheckSeatsRequest, out *CheckSeatsResponse) error
		FreeSeats(ctx context.Context, in *FreeSeatsRequest, out *FreeSeatsResponse) error
		GetSizeOfCinema(ctx context.Context, in *SizeRequest, out *SizeResponse) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) Create(ctx context.Context, in *CreateCinemaRequest, out *CreateCinemaResponse) error {
	return h.CinemaHandler.Create(ctx, in, out)
}

func (h *cinemaHandler) Delete(ctx context.Context, in *DeleteCinemaRequest, out *DeleteCinemaResponse) error {
	return h.CinemaHandler.Delete(ctx, in, out)
}

func (h *cinemaHandler) Reservation(ctx context.Context, in *ReservationRequest, out *ReservationResponse) error {
	return h.CinemaHandler.Reservation(ctx, in, out)
}

func (h *cinemaHandler) Storno(ctx context.Context, in *StornoRequest, out *StornoResponse) error {
	return h.CinemaHandler.Storno(ctx, in, out)
}

func (h *cinemaHandler) CheckSeats(ctx context.Context, in *CheckSeatsRequest, out *CheckSeatsResponse) error {
	return h.CinemaHandler.CheckSeats(ctx, in, out)
}

func (h *cinemaHandler) FreeSeats(ctx context.Context, in *FreeSeatsRequest, out *FreeSeatsResponse) error {
	return h.CinemaHandler.FreeSeats(ctx, in, out)
}

func (h *cinemaHandler) GetSizeOfCinema(ctx context.Context, in *SizeRequest, out *SizeResponse) error {
	return h.CinemaHandler.GetSizeOfCinema(ctx, in, out)
}
