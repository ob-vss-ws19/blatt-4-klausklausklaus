// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/reservation.proto

package reservationproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Reservation service

type ReservationService interface {
	// Function for making a Reservationsrequest.
	MakeReservation(ctx context.Context, in *MakeReservationRequest, opts ...client.CallOption) (*MakeReservationResponse, error)
	// Function to Accept a Reservation.
	AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...client.CallOption) (*AcceptReservationResponse, error)
	// Function to delete a Reservation.
	DeleteReservation(ctx context.Context, in *DeleteReservationRequest, opts ...client.CallOption) (*DeleteReservationResponse, error)
	// Function to change a Reservation.
	ChangeReservation(ctx context.Context, in *ChangeReservationRequest, opts ...client.CallOption) (*ChangeReservationResponse, error)
	// Function to Find a Reservation.
	ShowReservations(ctx context.Context, in *ShowReservationsRequest, opts ...client.CallOption) (*ShowReservationsResponse, error)
	// Function to stream all reservations of a user.
	StreamUsersReservations(ctx context.Context, in *StreamUsersReservationsRequest, opts ...client.CallOption) (*StreamUsersReservationsResponse, error)
	// Function to get the information whether or not a user has still some reservations.
	HasReservations(ctx context.Context, in *HasReservationsRequest, opts ...client.CallOption) (*HasReservationsResponse, error)
}

type reservationService struct {
	c    client.Client
	name string
}

func NewReservationService(name string, c client.Client) ReservationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "reservationproto"
	}
	return &reservationService{
		c:    c,
		name: name,
	}
}

func (c *reservationService) MakeReservation(ctx context.Context, in *MakeReservationRequest, opts ...client.CallOption) (*MakeReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.MakeReservation", in)
	out := new(MakeReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...client.CallOption) (*AcceptReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.AcceptReservation", in)
	out := new(AcceptReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) DeleteReservation(ctx context.Context, in *DeleteReservationRequest, opts ...client.CallOption) (*DeleteReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.DeleteReservation", in)
	out := new(DeleteReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) ChangeReservation(ctx context.Context, in *ChangeReservationRequest, opts ...client.CallOption) (*ChangeReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.ChangeReservation", in)
	out := new(ChangeReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) ShowReservations(ctx context.Context, in *ShowReservationsRequest, opts ...client.CallOption) (*ShowReservationsResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.ShowReservations", in)
	out := new(ShowReservationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) StreamUsersReservations(ctx context.Context, in *StreamUsersReservationsRequest, opts ...client.CallOption) (*StreamUsersReservationsResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.StreamUsersReservations", in)
	out := new(StreamUsersReservationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) HasReservations(ctx context.Context, in *HasReservationsRequest, opts ...client.CallOption) (*HasReservationsResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.HasReservations", in)
	out := new(HasReservationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reservation service

type ReservationHandler interface {
	// Function for making a Reservationsrequest.
	MakeReservation(context.Context, *MakeReservationRequest, *MakeReservationResponse) error
	// Function to Accept a Reservation.
	AcceptReservation(context.Context, *AcceptReservationRequest, *AcceptReservationResponse) error
	// Function to delete a Reservation.
	DeleteReservation(context.Context, *DeleteReservationRequest, *DeleteReservationResponse) error
	// Function to change a Reservation.
	ChangeReservation(context.Context, *ChangeReservationRequest, *ChangeReservationResponse) error
	// Function to Find a Reservation.
	ShowReservations(context.Context, *ShowReservationsRequest, *ShowReservationsResponse) error
	// Function to stream all reservations of a user.
	StreamUsersReservations(context.Context, *StreamUsersReservationsRequest, *StreamUsersReservationsResponse) error
	// Function to get the information whether or not a user has still some reservations.
	HasReservations(context.Context, *HasReservationsRequest, *HasReservationsResponse) error
}

func RegisterReservationHandler(s server.Server, hdlr ReservationHandler, opts ...server.HandlerOption) error {
	type reservation interface {
		MakeReservation(ctx context.Context, in *MakeReservationRequest, out *MakeReservationResponse) error
		AcceptReservation(ctx context.Context, in *AcceptReservationRequest, out *AcceptReservationResponse) error
		DeleteReservation(ctx context.Context, in *DeleteReservationRequest, out *DeleteReservationResponse) error
		ChangeReservation(ctx context.Context, in *ChangeReservationRequest, out *ChangeReservationResponse) error
		ShowReservations(ctx context.Context, in *ShowReservationsRequest, out *ShowReservationsResponse) error
		StreamUsersReservations(ctx context.Context, in *StreamUsersReservationsRequest, out *StreamUsersReservationsResponse) error
		HasReservations(ctx context.Context, in *HasReservationsRequest, out *HasReservationsResponse) error
	}
	type Reservation struct {
		reservation
	}
	h := &reservationHandler{hdlr}
	return s.Handle(s.NewHandler(&Reservation{h}, opts...))
}

type reservationHandler struct {
	ReservationHandler
}

func (h *reservationHandler) MakeReservation(ctx context.Context, in *MakeReservationRequest, out *MakeReservationResponse) error {
	return h.ReservationHandler.MakeReservation(ctx, in, out)
}

func (h *reservationHandler) AcceptReservation(ctx context.Context, in *AcceptReservationRequest, out *AcceptReservationResponse) error {
	return h.ReservationHandler.AcceptReservation(ctx, in, out)
}

func (h *reservationHandler) DeleteReservation(ctx context.Context, in *DeleteReservationRequest, out *DeleteReservationResponse) error {
	return h.ReservationHandler.DeleteReservation(ctx, in, out)
}

func (h *reservationHandler) ChangeReservation(ctx context.Context, in *ChangeReservationRequest, out *ChangeReservationResponse) error {
	return h.ReservationHandler.ChangeReservation(ctx, in, out)
}

func (h *reservationHandler) ShowReservations(ctx context.Context, in *ShowReservationsRequest, out *ShowReservationsResponse) error {
	return h.ReservationHandler.ShowReservations(ctx, in, out)
}

func (h *reservationHandler) StreamUsersReservations(ctx context.Context, in *StreamUsersReservationsRequest, out *StreamUsersReservationsResponse) error {
	return h.ReservationHandler.StreamUsersReservations(ctx, in, out)
}

func (h *reservationHandler) HasReservations(ctx context.Context, in *HasReservationsRequest, out *HasReservationsResponse) error {
	return h.ReservationHandler.HasReservations(ctx, in, out)
}
