// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/show.proto

package showproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Show service

type ShowService interface {
	CreateShow(ctx context.Context, in *CreateShowRequest, opts ...client.CallOption) (*CreateShowResponse, error)
	DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...client.CallOption) (*DeleteShowResponse, error)
	DeleteShowConnectedCinema(ctx context.Context, in *DeleteShowConnectedCinemaRequest, opts ...client.CallOption) (*DeleteShowConnectedCinemaResponse, error)
	DeleteShowConnectedMovie(ctx context.Context, in *DeleteShowConnectedMovieRequest, opts ...client.CallOption) (*DeleteShowConnectedMovieResponse, error)
	ListShow(ctx context.Context, in *ListShowRequest, opts ...client.CallOption) (*ListShowResponse, error)
	FindShowConnectedCinema(ctx context.Context, in *FindShowConnectedCinemaRequest, opts ...client.CallOption) (*FindShowConnectedCinemaResponse, error)
	FindShowConnectedMovie(ctx context.Context, in *FindShowConnectedMovieRequest, opts ...client.CallOption) (*FindShowConnectedMovieResponse, error)
}

type showService struct {
	c    client.Client
	name string
}

func NewShowService(name string, c client.Client) ShowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "showproto"
	}
	return &showService{
		c:    c,
		name: name,
	}
}

func (c *showService) CreateShow(ctx context.Context, in *CreateShowRequest, opts ...client.CallOption) (*CreateShowResponse, error) {
	req := c.c.NewRequest(c.name, "Show.CreateShow", in)
	out := new(CreateShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...client.CallOption) (*DeleteShowResponse, error) {
	req := c.c.NewRequest(c.name, "Show.DeleteShow", in)
	out := new(DeleteShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) DeleteShowConnectedCinema(ctx context.Context, in *DeleteShowConnectedCinemaRequest, opts ...client.CallOption) (*DeleteShowConnectedCinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Show.DeleteShowConnectedCinema", in)
	out := new(DeleteShowConnectedCinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) DeleteShowConnectedMovie(ctx context.Context, in *DeleteShowConnectedMovieRequest, opts ...client.CallOption) (*DeleteShowConnectedMovieResponse, error) {
	req := c.c.NewRequest(c.name, "Show.DeleteShowConnectedMovie", in)
	out := new(DeleteShowConnectedMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) ListShow(ctx context.Context, in *ListShowRequest, opts ...client.CallOption) (*ListShowResponse, error) {
	req := c.c.NewRequest(c.name, "Show.ListShow", in)
	out := new(ListShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) FindShowConnectedCinema(ctx context.Context, in *FindShowConnectedCinemaRequest, opts ...client.CallOption) (*FindShowConnectedCinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Show.FindShowConnectedCinema", in)
	out := new(FindShowConnectedCinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) FindShowConnectedMovie(ctx context.Context, in *FindShowConnectedMovieRequest, opts ...client.CallOption) (*FindShowConnectedMovieResponse, error) {
	req := c.c.NewRequest(c.name, "Show.FindShowConnectedMovie", in)
	out := new(FindShowConnectedMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Show service

type ShowHandler interface {
	CreateShow(context.Context, *CreateShowRequest, *CreateShowResponse) error
	DeleteShow(context.Context, *DeleteShowRequest, *DeleteShowResponse) error
	DeleteShowConnectedCinema(context.Context, *DeleteShowConnectedCinemaRequest, *DeleteShowConnectedCinemaResponse) error
	DeleteShowConnectedMovie(context.Context, *DeleteShowConnectedMovieRequest, *DeleteShowConnectedMovieResponse) error
	ListShow(context.Context, *ListShowRequest, *ListShowResponse) error
	FindShowConnectedCinema(context.Context, *FindShowConnectedCinemaRequest, *FindShowConnectedCinemaResponse) error
	FindShowConnectedMovie(context.Context, *FindShowConnectedMovieRequest, *FindShowConnectedMovieResponse) error
}

func RegisterShowHandler(s server.Server, hdlr ShowHandler, opts ...server.HandlerOption) error {
	type show interface {
		CreateShow(ctx context.Context, in *CreateShowRequest, out *CreateShowResponse) error
		DeleteShow(ctx context.Context, in *DeleteShowRequest, out *DeleteShowResponse) error
		DeleteShowConnectedCinema(ctx context.Context, in *DeleteShowConnectedCinemaRequest, out *DeleteShowConnectedCinemaResponse) error
		DeleteShowConnectedMovie(ctx context.Context, in *DeleteShowConnectedMovieRequest, out *DeleteShowConnectedMovieResponse) error
		ListShow(ctx context.Context, in *ListShowRequest, out *ListShowResponse) error
		FindShowConnectedCinema(ctx context.Context, in *FindShowConnectedCinemaRequest, out *FindShowConnectedCinemaResponse) error
		FindShowConnectedMovie(ctx context.Context, in *FindShowConnectedMovieRequest, out *FindShowConnectedMovieResponse) error
	}
	type Show struct {
		show
	}
	h := &showHandler{hdlr}
	return s.Handle(s.NewHandler(&Show{h}, opts...))
}

type showHandler struct {
	ShowHandler
}

func (h *showHandler) CreateShow(ctx context.Context, in *CreateShowRequest, out *CreateShowResponse) error {
	return h.ShowHandler.CreateShow(ctx, in, out)
}

func (h *showHandler) DeleteShow(ctx context.Context, in *DeleteShowRequest, out *DeleteShowResponse) error {
	return h.ShowHandler.DeleteShow(ctx, in, out)
}

func (h *showHandler) DeleteShowConnectedCinema(ctx context.Context, in *DeleteShowConnectedCinemaRequest, out *DeleteShowConnectedCinemaResponse) error {
	return h.ShowHandler.DeleteShowConnectedCinema(ctx, in, out)
}

func (h *showHandler) DeleteShowConnectedMovie(ctx context.Context, in *DeleteShowConnectedMovieRequest, out *DeleteShowConnectedMovieResponse) error {
	return h.ShowHandler.DeleteShowConnectedMovie(ctx, in, out)
}

func (h *showHandler) ListShow(ctx context.Context, in *ListShowRequest, out *ListShowResponse) error {
	return h.ShowHandler.ListShow(ctx, in, out)
}

func (h *showHandler) FindShowConnectedCinema(ctx context.Context, in *FindShowConnectedCinemaRequest, out *FindShowConnectedCinemaResponse) error {
	return h.ShowHandler.FindShowConnectedCinema(ctx, in, out)
}

func (h *showHandler) FindShowConnectedMovie(ctx context.Context, in *FindShowConnectedMovieRequest, out *FindShowConnectedMovieResponse) error {
	return h.ShowHandler.FindShowConnectedMovie(ctx, in, out)
}
