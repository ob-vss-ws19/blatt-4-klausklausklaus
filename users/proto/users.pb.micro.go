// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/users.proto

package userproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Users service

type UsersService interface {
	//
	//CreateUser will create user.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreatedUserResponse, error)
	//
	//FindUser will find a user by his userid.
	FindUser(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*FindUserResponse, error)
	//
	//FindUserByName will find a user by his name.
	FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...client.CallOption) (*FindUserResponse, error)
	//
	//DeleteUser will delete a user by his userid.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	//
	//changeUser will change a users entry in the service.
	ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...client.CallOption) (*ChangeUserResponse, error)
	//
	//GetAllUsers will return a list with all users.
	ReceiveAndSendAllUsers(ctx context.Context, in *AllUsersRequest, opts ...client.CallOption) (*AllUsersResponse, error)
}

type usersService struct {
	c    client.Client
	name string
}

func NewUsersService(name string, c client.Client) UsersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userproto"
	}
	return &usersService{
		c:    c,
		name: name,
	}
}

func (c *usersService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreatedUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.CreateUser", in)
	out := new(CreatedUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) FindUser(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*FindUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.FindUser", in)
	out := new(FindUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...client.CallOption) (*FindUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.FindUserByName", in)
	out := new(FindUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...client.CallOption) (*ChangeUserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.ChangeUser", in)
	out := new(ChangeUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) ReceiveAndSendAllUsers(ctx context.Context, in *AllUsersRequest, opts ...client.CallOption) (*AllUsersResponse, error) {
	req := c.c.NewRequest(c.name, "Users.ReceiveAndSendAllUsers", in)
	out := new(AllUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersHandler interface {
	//
	//CreateUser will create user.
	CreateUser(context.Context, *CreateUserRequest, *CreatedUserResponse) error
	//
	//FindUser will find a user by his userid.
	FindUser(context.Context, *FindUserRequest, *FindUserResponse) error
	//
	//FindUserByName will find a user by his name.
	FindUserByName(context.Context, *FindUserByNameRequest, *FindUserResponse) error
	//
	//DeleteUser will delete a user by his userid.
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	//
	//changeUser will change a users entry in the service.
	ChangeUser(context.Context, *ChangeUserRequest, *ChangeUserResponse) error
	//
	//GetAllUsers will return a list with all users.
	ReceiveAndSendAllUsers(context.Context, *AllUsersRequest, *AllUsersResponse) error
}

func RegisterUsersHandler(s server.Server, hdlr UsersHandler, opts ...server.HandlerOption) error {
	type users interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreatedUserResponse) error
		FindUser(ctx context.Context, in *FindUserRequest, out *FindUserResponse) error
		FindUserByName(ctx context.Context, in *FindUserByNameRequest, out *FindUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		ChangeUser(ctx context.Context, in *ChangeUserRequest, out *ChangeUserResponse) error
		ReceiveAndSendAllUsers(ctx context.Context, in *AllUsersRequest, out *AllUsersResponse) error
	}
	type Users struct {
		users
	}
	h := &usersHandler{hdlr}
	return s.Handle(s.NewHandler(&Users{h}, opts...))
}

type usersHandler struct {
	UsersHandler
}

func (h *usersHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreatedUserResponse) error {
	return h.UsersHandler.CreateUser(ctx, in, out)
}

func (h *usersHandler) FindUser(ctx context.Context, in *FindUserRequest, out *FindUserResponse) error {
	return h.UsersHandler.FindUser(ctx, in, out)
}

func (h *usersHandler) FindUserByName(ctx context.Context, in *FindUserByNameRequest, out *FindUserResponse) error {
	return h.UsersHandler.FindUserByName(ctx, in, out)
}

func (h *usersHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UsersHandler.DeleteUser(ctx, in, out)
}

func (h *usersHandler) ChangeUser(ctx context.Context, in *ChangeUserRequest, out *ChangeUserResponse) error {
	return h.UsersHandler.ChangeUser(ctx, in, out)
}

func (h *usersHandler) ReceiveAndSendAllUsers(ctx context.Context, in *AllUsersRequest, out *AllUsersResponse) error {
	return h.UsersHandler.ReceiveAndSendAllUsers(ctx, in, out)
}
